See launchpad.net/awn for blueprints and bugs.

===

Using this as a brain-dump location for an incomplete list of remaining thnings
that need to be done before we can make a devel release:

src/
  - Make the panel set the right hints for
    - Panel mode
    - Desktop mode
  - Add DBus support to inhibit autohide
  - auto-resize support when panel runs out of space
  - Add expand mode support
    - Make sure AwnAppletManager respects the applets expand setting for
      expand major/minor
  - Fix the backgrounds
    - Port over meek's work on png/svg backgrounds
      - Will need to add a small .desktop file to the theme directory so we can
        get:
        - Name
        - Author
        - Version
        - License ?
        - clip_size (for the bottom)
        - padding_size (extra padding around the minor edges of the panel i.e.
          left/right edge for orient==bottom, top/bottom for orient==right).
    - Need to add support for AwnBackground to signal to the panel that it 
      needs extra padding around the main bar.
  - Write simple preferences for the panel
    - General
      - Panel size & orientation
      - Multi-monitor set-up
      - [] Expand, [] Autohide
    - Effects and Themeing/Look and feel
      - Icon effects
      - Theme engine
        - Flat, 3D or pixmap
          - If flat/3d, which colours (not if in Gtk theme mode)
          - If pixmap, which theme
        - [] Use desktop theme colours
      - Applets
        - Simple applet list with way to add/remove/reorder/install/delete
  - Seperator support
  - Expander/spring support
  - A11y support!?! (not a critical, but we should have a plan)
    - keyboard navigation at minimum
    - some sort of ATK support?

libawn/
  - AwnIcon/AwnEffects
    - metadata drawing
      - message
    - replace config bitfield for effects with a bunch of string-based options
      (enum-like)
    - [Nice-to-have] make speed of effects configurable
  - AwnAppletSimple
    - Write a test-case with lots of pixbuf, cairo_surface and icon-name swaps
      to make sure we are not leaking when doing switches
    - Make sure I haven't broken the themed icon support
  - AwnTooltip
    - shadows?
  - AwnAppletDialog
    - Rewrite to make it easier to manager
    - orientation support
    - shadows?
    - Inhibit autohide on the panel if dialog is showing
  - AwnConfigClient
    - Make sure GKeyFile and GConf backends are still working, check for any
      more mem leaks
    - [Nice-to-have] port to use libdesktop-agnostic
  - AwnConfigBridge
    - Fix situation where object dies but config change callbacks are still
      called with invalid pointer to the dead object
    - [Nice-to-have] use libdesktop-agnostic's config bridge instead (which is
      based on this code)
  - AwnColor
    - [Nice-to-have] replace with libdesktop-agnostic's color class (code should
      be complete)

applets/taskmananger
  - Complete simple window-managment
    - D-Bus support
      - Add the necessary stuff to get TaskWindow's on dbus, so external
        processes can
        - Set progress/message information
        - Change the icon
          - Add support for sending a pixbuf over the bus in libawn + python
        - Replace the context menu with their own menu/dialog
          - Have a way to still reach the standard context menu if need be
    - "Create shortcut" support
  - TaskIcon
    - Add support for re-arranging taskicons
    - Support for doing something clever when desktop files are dropped on the
      bar (like adding them).
  - Window grouping
    - Drag-and-drop of task-icons on top eachother to create arbitary groups
    - Application grouping
      - Always/sometimes/never
    - Show all windows when clicked/scrubbing/show popup on right-click to
      choose windows
    - Drag & Drop support for multiple windows
  - Preferences
    - For what?
      - Addition/removing of launchers can be done through drag-and-drop
      - Re-ordering of launchers can be done the same way


misc
  - Python/Vala bindings
  - Process naming in awn-applet-activation
  - Documentation

===

Pyawn Notes
awn_applet_dialog_new needs to be re-done to work.

(define-function dialog_new
  (c-name "awn_applet_dialog_new")
  (is-constructor-of "AwnAppletDialog")
  (return-type "GtkWidget*")
  (parameters
    '("AwnApplet*" "applet")
  )
)
