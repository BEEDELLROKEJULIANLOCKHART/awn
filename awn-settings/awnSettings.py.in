#!/usr/bin/python
#
#  Copyright (C) 2007 Neil Jagdish Patel <njpatel@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA.
#
#  Author: Ryan Rushton <ryan@rrdesign.ca>
#
#  Notes: Avant Window Navigator Manager

import sys
import os

PLAT_PKG = '@PY_PLAT_PKG@'
SITE_PKG = '@PY_SITE_PKG@'
AWN_SETTINGS_DIR = os.path.join('@PKGDATADIR@', 'awn-settings')
sys.path = [AWN_SETTINGS_DIR] + sys.path
if PLAT_PKG not in sys.path:
    sys.path = [PLAT_PKG] + sys.path
if SITE_PKG not in sys.path:
    sys.path = [SITE_PKG] + sys.path

try:
    import pygtk
    pygtk.require("2.0")
except:
    pass
try:
    import gobject
    import gtk
    import gtk.gdk as gdk
except Exception, e:
    sys.stderr.write(str(e) + '\n')
    sys.exit(1)

#from awnTheme import AwnThemeManager
from awnClass import awnPreferences, awnManager, awnLauncher, awnApplet
#from awnApplet import awnApplet
#from awnLauncher import awnLauncher

from awnSettingsHelper import bind_to_gtk_component

import awn
import awnDefs as defs

from desktopagnostic import config
from desktopagnostic import vfs
from desktopagnostic import Color
from desktopagnostic.config import GROUP_DEFAULT

defs.i18nize(globals())

if os.geteuid() == 0:
    sys.stderr.write(_("Awn Settings can't be run as root.") + '\n')
    sys.exit(1)

# there's a bug in propertyhelper, so we'll workaround it
class color_property(gobject.property):

    def get_pspec_args(self):
        return (Color.__gtype__, self.nick, self.blurb, self.flags)

class awnPreferencesMini(awnPreferences):
    panel_size = gobject.property(type=int, default=48)
    panel_orient = gobject.property(type=int, default=2)
    panel_offset = gobject.property(type=int, default=10)
    panel_style = gobject.property(type=int, default=1)
    panel_expand = gobject.property(type=bool, default=False)

    clickthrough = gobject.property(type=int, default=1)
    autohide_type = gobject.property(type=int)
    panel_mode = gobject.property(type=bool, default=False)

    monitor_align = gobject.property(type=gobject.TYPE_FLOAT, default=0.5)
    monitor_force = gobject.property(type=bool, default=False)
    monitor_width = gobject.property(type=int, default=1024)
    monitor_height = gobject.property(type=int, default=768)
    monitor_offset = gobject.property(type=int, default=0)

    reflection_offset = gobject.property(type=int, default=0)
    reflection_alpha = gobject.property(type=gobject.TYPE_FLOAT, default=0.3)
    icon_alpha = gobject.property(type=gobject.TYPE_FLOAT, default=1.0)
    show_shadows = gobject.property(type=bool, default=False)
    arrow_type = gobject.property(type=str)

    launchers_only = gobject.property(type=bool, default=False)
    show_all_windows = gobject.property(type=bool, default=True)
    intellihide = gobject.property(type=bool, default=True)
    group_windows = gobject.property(type=bool, default=True)
    drag_and_drop = gobject.property(type=bool, default=True)
    match_strength = gobject.property(type=int, default=99)

    def __init__(self, wTree):
        awnPreferences.__init__(self)
        
        self.wTree = wTree
        self.client = awn.config_get_default(awn.PANEL_ID_DEFAULT)
        self.client_taskman = awn.config_get_default_for_applet_by_info("taskmanager", "")

        # Make sure the config dir exist
        if not os.path.isdir(defs.HOME_CONFIG_DIR):
            os.mkdir(defs.HOME_CONFIG_DIR)

        # If the sources.list doesn't exist, create one
        if not os.path.isfile(os.path.join(defs.HOME_CONFIG_DIR,"sources.list")):
            self.create_sources_list()
            self.update_sources_list()
        '''
        exit_theme_button = self.wTree.get_object("exit_theme_select")
        exit_theme_button.connect("clicked", lambda data=None:  self.load_themes_win.hide_all())

        self.load_themes_win = self.wTree.get_object("choose_theme")
        self.view_themes_scrol = self.wTree.get_object("list_themes_scrol")


        self.choose_themes_button = self.wTree.get_object("choose_theme_button")
        self.choose_themes_button.connect("clicked", self.choose_theme_win_callback)
        self.apply_theme = self.wTree.get_object("apply_theme")
        self.apply_theme.connect("clicked", self.apply_theme_callback)
        '''
        self.setup_effect (defs.EFFECTS, defs.ICON_EFFECT, self.wTree.get_object("iconeffects"))
        #self.setup_freeze(self.wTree.get_object("freezeEffects"), self.wTree.get_object("iconeffects"), "effects")

        self.theme_desktop = self.client.get_string(defs.THEME, defs.CURRENT_THEME)

        # setup orientation model
        dropdown = self.wTree.get_object("orientationcombo")
        self.create_dropdown(dropdown, [_("Left"), _("Right"),
                                        _("Top"), _("Bottom")])

        #setup style mode
        dropdown = self.wTree.get_object("stylecombo")
        self.create_dropdown(dropdown, [_("None"), _("Flat"), _("3d"),
                                        _("Curved"), _("Edgy"), _("Floaty")])

        #setup behaviour combo
        dropdown = self.wTree.get_object("behaviorcombo")
        self.create_dropdown(dropdown, [_("Standard"), _("Panel mode"),
                                        _("Autohide Keep below"),
                                        _("Autohide Fade out"),
                                        _("Transparency"), _("Custom")])

        config_map_simple = [
            # General options
            (self.client, defs.PANEL, defs.SIZE,
                "panel-size", "panelsize"),
            (self.client, defs.PANEL, defs.ORIENT,
                "panel-orient", "orientationcombo"),
            (self.client, defs.PANEL, defs.STYLE,
                "panel-style", "stylecombo"),
            (self.client, defs.PANEL, defs.EXPAND,
                "panel-expand", "expand_config"),
            (self.client, defs.PANEL, defs.MONITOR_ALIGN,
                "monitor-align", "monitor_align_hscale"),
            (self.client_taskman, GROUP_DEFAULT, defs.ONLY_LAUNCHERS,
                "launchers-only", "only_launchers_config"),
            (self.client_taskman, GROUP_DEFAULT, defs.ALL_WINDOWS,
                "show-all-windows", "show_all_windows_config"),
            (self.client_taskman, GROUP_DEFAULT, defs.GROUPING,
                "group-windows", "grouping_config"),
            (self.client_taskman, GROUP_DEFAULT, defs.INTELLIHIDE,
                "intellihide", "intellihide_config"),
            # Advanced options
            (self.client, defs.PANEL, defs.OFFSET,
                "panel-offset", "offset_config"),
            (self.client, defs.PANEL, defs.CLICKTHROUGH,
                "clickthrough", "clickthrough_config"),
            (self.client, defs.PANEL, defs.MONITOR_FORCE,
                "monitor-force", "force_monitor"),
            (self.client, defs.PANEL, defs.MONITOR_WIDTH,
                "monitor-width", "monitor_width"),
            (self.client, defs.PANEL, defs.MONITOR_HEIGHT,
                "monitor-height", "monitor_height"),
            (self.client, defs.PANEL, defs.MONITOR_OFFSET,
                "monitor-offset", "monitor_offset"),
            (self.client, defs.EFFECTS, defs.REFLECTION_OFFSET,
                "reflection-offset", "reflection_offset_config"),
            (self.client, defs.EFFECTS, defs.ICON_ALPHA,
                "icon-alpha", "icon_alpha_config"),
            (self.client, defs.EFFECTS, defs.REFLECTION_A_MULTIPLIER,
                "reflection-alpha", "reflection_alpha_multiplier_config"),
            (self.client, defs.EFFECTS, defs.SHOW_SHADOWS,
                "show-shadows", "show_shadows_config"),
            (self.client_taskman, GROUP_DEFAULT, defs.DRAG_AND_DROP,
                "drag-and-drop", "drag_and_drop_config"),
            (self.client_taskman, GROUP_DEFAULT, defs.MATCH_STRENGTH,
                "match-strength", "match_strength_config"),
        ]

        for item in config_map_simple:
            client, group, key, prop_name, wtree_name = item
            bind_to_gtk_component (client, group, key, self, prop_name,
                                   self.wTree.get_object(wtree_name), False)

        # Colors
        color_map = [
            (self.client, defs.THEME, defs.GSTEP1, "gstep1_colorbutton"),
            (self.client, defs.THEME, defs.GSTEP2, "gstep2_colorbutton"),
            (self.client, defs.THEME, defs.GHISTEP1, "ghistep1_colorbutton"),
            (self.client, defs.THEME, defs.GHISTEP2, "ghistep2_colorbutton"),
            (self.client, defs.THEME, defs.BORDER, "border_colorbutton"),
            (self.client, defs.THEME, defs.HILIGHT, "hilight_colorbutton")
        ]
        '''
        for item in color_map:
            client, group, key, wtree_name = item
            widget = self.wTree.get_object(wtree_name)
            client.bind (group, key, widget, "da-color",
                         False, config.BIND_METHOD_FALLBACK)
        '''
        #Advanced
        self.setup_autostart (self.wTree.get_object("autostart_config"))

        # Non-trivial bindings

        # Behaviour combobox
        self.choose_behavior = self.wTree.get_object("behaviorcombo")

        def refresh_behaviour(*args):
            behaviour = (self.panel_mode, self.autohide_type, self.clickthrough)
            new_active = 5
            if behaviour == (False, 0, 1):
                new_active = 0
            elif behaviour == (True, 0, 0):
                new_active = 1
            elif behaviour == (False, 1, 0):
                new_active = 2
            elif behaviour == (False, 2, 0):
                new_active = 3
            elif behaviour == (False, 3, 0):
                new_active = 4

            if (self.choose_behavior.get_active() != new_active):
                self.choose_behavior.set_active(new_active)

        def choose_behavior_callback(widget, *args):
            if widget.get_active() == 0:
                if self.panel_mode: self.panel_mode = False
                if self.clickthrough == 0: self.clickthrough = 1
                self.autohide_type = 0
            elif widget.get_active() == 1:
                if not self.panel_mode: self.panel_mode = True
                if self.clickthrough != 0: self.clickthrough = 0
                self.autohide_type = 0
            elif widget.get_active() == 2:
                if self.panel_mode: self.panel_mode = False
                if self.clickthrough != 0: self.clickthrough = 0
                self.autohide_type = 1
            elif widget.get_active() == 3:
                if self.panel_mode: self.panel_mode = False
                if self.clickthrough != 0: self.clickthrough = 0
                self.autohide_type = 2
            elif widget.get_active() == 4:
                if self.panel_mode: self.panel_mode = False
                if self.clickthrough != 0: self.clickthrough = 0
                self.autohide_type = 3

        self.client.bind (defs.PANEL, defs.PANEL_MODE, self, "panel-mode",
                          False, config.BIND_METHOD_FALLBACK)
        self.client.bind (defs.PANEL, defs.AUTOHIDE, self, "autohide-type",
                          False, config.BIND_METHOD_FALLBACK)
        # clickthough is already bound

        self.connect("notify::panel-mode", refresh_behaviour)
        self.connect("notify::autohide-type", refresh_behaviour)
        self.connect("notify::clickthrough", refresh_behaviour)

        refresh_behaviour()

        self.choose_behavior.connect("changed", choose_behavior_callback)

        # Arrow type radio group
        def arrow_type_getter (arrow_type):
            d = {"__awn_internal_arrow1": 0, "__awn_internal_arrow2": 1}
            if arrow_type in d: return d[arrow_type]
            else: return 2

        arrow_type_setter = lambda x: ["__awn_internal_arrow1",
                                       "__awn_internal_arrow2",
                                       ""][x]

        bind_to_gtk_component (self.client, defs.EFFECTS, defs.ARROW_ICON,
                               self, "arrow-type",
                               self.wTree.get_object("arrow_triangle_radio"),
                               False,
                               arrow_type_getter, arrow_type_setter)

    def reload(self):
        # FIXME: this method should be unnecessary soon
        self.load_effect (defs.EFFECTS, defs.ICON_EFFECT, self.wTree.get_object("iconeffects"))

        #Advanced
        self.load_spin(defs.PANEL, defs.AUTOHIDE, self.wTree.get_object("autohide_config"))
        self.load_bool(defs.PANEL, defs.PANEL_MODE, self.wTree.get_object("panel_mode_config"))

        self.load_autostart (self.wTree.get_object("autostart_config"))

        #TODO Need a combobox or load_string
        #self.load_spin(defs.EFFECTS, defs.ARROW_ICON, self.wTree.get_object("arrow_icon_config"))

        #Repositories
        '''
        update_win = self.wTree.get_object("update_repository")
        exit_button = self.wTree.get_object("exit_update_win")
        exit_button.connect("clicked", lambda data=None:  update_win.hide_all())
        self.update_bar = self.wTree.get_object("update_progress")
        update_win.connect("show", lambda data=None: self.update_sources_list(progressbar=self.update_bar))

        update_repo = self.wTree.get_object("update_repo")
        update_repo.connect("clicked",  lambda data=None: update_win.show_all())

        add_repo = self.wTree.get_object("add_repo")
        add_repo.connect("clicked", self.add_repo_win_callback)

        self.add_repo_get_entry = self.wTree.get_object("add_repo_entry")

        self.add_repo_plus = self.wTree.get_object("add_repo_plus")
        self.add_repo_plus.connect("clicked", self.add_repo_callback)

        quit_repo = self.wTree.get_object("repo_quit")
        quit_repo.connect("clicked", lambda data=None: self.top_window_repo.hide_all())

        self.top_window_repo = self.wTree.get_object("add_repository")
        self.view_repo = self.wTree.get_object("list_repos_view")
        '''

    def add_repo_win_callback(self, data=None):
        self.update_repo_view()
        self.top_window_repo.show_all()

    def update_repo_view(self, data=None):
        self.view_repo.hide_all()
        for elem in self.view_repo.get_children():
            elem.destroy()
        sources = self.sources_from_sources_list()
        for elem in sources:
            hbox = gtk.HBox()
            button = gtk.Button(stock="gtk-delete")
            label = gtk.Label()
            label.set_text(elem)
            hbox.pack_start(label, expand=False, fill=False)
            button.connect("clicked", self.remove_repo_callback, elem)
            hbox.pack_end(button, expand=False, fill=False)
            self.view_repo.pack_start(hbox, expand=False, fill=False)
        self.view_repo.show_all()


    def remove_repo_callback(self, elem, data=None):
        parent = elem.get_parent()
        child = parent.get_children()
        self.remove_source(child[0].get_text())
        self.update_repo_view()

    def add_repo_callback(self, data=None):
        source = self.add_repo_get_entry.get_text()
        self.add_source(source)
        self.update_repo_view()

    def choose_theme_win_callback(self, data=None):
        self.update_view_themes()
        self.load_themes_win.show_all()

    def update_view_themes(self, data=None):
        self.view_themes_scrol.hide_all()

        for elem in self.view_themes_scrol.get_children():
            elem.destroy()

        themes = self.type_catalog_from_sources_list()
        self.treeview_themes = gtk.TreeView()
        self.treeview_themes.set_headers_visible(False)
        self.view_themes_scrol.add(self.treeview_themes)
        self.refresh_tree(themes, self.make_model(themes, self.treeview_themes))
        self.view_themes_scrol.show_all()

    def apply_theme_callback(self, data=None):
        model = self.treeview_themes.get_model()
        selection = self.treeview_themes.get_selection()
        select = selection.get_selected()
        path = model.get(select[1], 2)
        self.load_all_settings_from_desktop(path[0])
        self.client.set_string(defs.THEME, defs.CURRENT_THEME, path[0])


class awnLauncherMini(awnLauncher):
    def __init__(self, glade):
        self.wTree = glade
        if not os.path.exists(defs.HOME_LAUNCHERS_DIR):
            os.makedirs(defs.HOME_LAUNCHERS_DIR)

        self.load_finished = False

        self.idle_id = 0

        self.client_taskman = awn.config_get_default_for_applet_by_info("taskmanager",
                                                                "")

        self.scrollwindow = self.wTree.get_object("launchers_scroll_list")

        self.treeview_launchers = gtk.TreeView()
        self.treeview_launchers.set_reorderable(True)
        self.treeview_launchers.set_headers_visible(False)

        self.scrollwindow.add(self.treeview_launchers)

        self.launchers_uris = self.client_taskman.get_list(GROUP_DEFAULT,
                                                           defs.LAUNCHERS_LIST)

        self.last_uris = self.launchers_uris[:] # make a copy
        launchers_model = self.make_model(self.launchers_uris,
                                          self.treeview_launchers)
        self.refresh_tree(self.launchers_uris, launchers_model)
        self.client_taskman.notify_add(GROUP_DEFAULT,
                                       defs.LAUNCHERS_LIST,
                                       self.refresh_launchers,
                                       launchers_model)

        self.applet_remove = self.wTree.get_object("launcher_remove")
        self.applet_remove.connect("clicked", self.remove)
        self.applet_add = self.wTree.get_object("launcher_add")
        self.applet_add.connect("clicked", self.add)
        self.launcher_edit = self.wTree.get_object("launcher_edit")
        self.launcher_edit.connect("clicked", self.edit)

class awnAppletMini(awnApplet):
    def __init__(self, glade):
        if not os.path.isdir(defs.HOME_APPLET_DIR):
            os.mkdir(defs.HOME_APPLET_DIR)

        self.client = awn.config_get_default(1)

        self.treeview_current = None
        self.load_finished = False

        self.wTree = glade

        self.scrollwindow = self.wTree.get_object("appletScrollActive")
        self.scrollwindow1 = self.wTree.get_object("appletScrollActive1")
        self.treeview_available =  self.wTree.get_object("appletTreeviewAvailable")
        self.treeview_available.set_headers_visible(False)
        self.make_active_model()

        if self.type_catalog_from_sources_list(type_catalog='Applet') == []:
            self.write_default_sources_list(sources_list_path = os.path.join(defs.HOME_CONFIG_DIR,"sources.list"))

        self.load_applets()

        #self.choose_categorie = self.wTree.get_object("applets_catagories")
        #self.create_dropdown(self.choose_categorie, self.list_applets_categories())
        #self.choose_categorie.connect("changed", self.callback_widget_filter_applets)
        
        self.choose_category_view = self.wTree.get_object("appletCategoryList")
        selection = self.choose_category_view.get_selection()
        selection.connect('changed', self.callback_widget_filter_applets_view)
        self.create_category_list(self.list_applets_categories())
 
        self.btn_deactivate = self.wTree.get_object("appletDeactivate")
        self.btn_deactivate.connect("clicked", self.deactivate_applet)

        self.btn_activate = self.wTree.get_object("appletActivate")
        self.btn_activate.connect("clicked", self.activate_applet)

        self.btn_delete = self.wTree.get_object("appletDelete")
        self.btn_delete.connect("clicked", self.delete_applet)

        self.btn_install = self.wTree.get_object("appletInstall")
        self.btn_install.connect("clicked", self.install_applet)

        self.treeview_available.enable_model_drag_dest([('text/plain', 0, 0)],
                  gdk.ACTION_DEFAULT | gdk.ACTION_MOVE)
        self.treeview_available.connect("drag_data_received", self.drag_data_received_data)
    
    def create_category_list(self, categories):
        category_model = gtk.ListStore(str)
        #self.cat_model.connect("row-activated", self.callback_widget_filter_applets_view)
        category_model.set_sort_column_id(0, gtk.SORT_ASCENDING)
        self.choose_category_view.set_model (category_model)
        #self.choose_category_view.set_search_column (0)

        #ren = gtk.CellRendererText()
        #col = gtk.TreeViewColumn ("Category", ren, markup=1)
        #self.choose_category_view.append_column (col)
        
        [category_model.append([elem]) for elem in categories]
        
class awnManagerMini(awnManager):
    PREFERENCE_PANEL = 0
    APPLET_PANEL = 1 
    LAUNCHER_PANEL = 2
    THEME_PANEL = 3
    ADVANCED_PANEL = 4
    
    current_panel = None
    
    def __init__(self):
        self.XML_PATH = os.path.join(AWN_SETTINGS_DIR, 'awn-settings.ui')

        self.wTree = gtk.Builder()
        self.wTree.add_from_file(self.XML_PATH)
        self.wTree.set_translation_domain(defs.I18N_DOMAIN)

        self.window = self.wTree.get_object("awnManagerWindow")
        self.panel_container = self.wTree.get_object("panelContainer")
        self.createMainMenu()
        
        self.theme = gtk.icon_theme_get_default()
        icon_search_path = os.path.join('@DATADIR@', 'icons')
        if icon_search_path not in self.theme.get_search_path():
            self.theme.append_search_path(icon_search_path)
        icon_list = []
        icon_sizes = self.theme.get_icon_sizes('awn-settings')
        for size in icon_sizes:
            if size == -1: # scalable
                if 128 not in icon_sizes:
                    icon = self.safe_load_icon('awn-settings', 128, gtk.ICON_LOOKUP_USE_BUILTIN)
                else:
                    continue
            else:
                icon = self.safe_load_icon('awn-settings', size, gtk.ICON_LOOKUP_USE_BUILTIN)
            icon_list.append(icon)
        if len(icon_list) > 0:
            gtk.window_set_default_icon_list(*icon_list)
        self.window.connect("delete-event", gtk.main_quit)

        self.prefManager = awnPreferencesMini(self.wTree)
        self.prefLauncher = awnLauncherMini(self.wTree)
        self.appletManager = awnAppletMini(self.wTree)

        about = self.wTree.get_object("buttonAbout")
        about.connect("clicked", self.about)

        close = self.wTree.get_object("buttonClose")
        close.connect("clicked", gtk.main_quit)

        self.window.show()
        
    def createMainMenu(self):
        self.main_menu_icon_view = self.wTree.get_object("mainMenuIconView")
        self.main_menu_icon_view.connect("selection-changed", self.showPanel);

        store = gtk.ListStore(str, gtk.gdk.Pixbuf, str) 
        store.append([
            'Preferences', 
            self.main_menu_icon_view.render_icon(gtk.STOCK_PROPERTIES, gtk.ICON_SIZE_BUTTON),
            self.PREFERENCE_PANEL
        ])

        store.append([
            'Applets', 
            self.main_menu_icon_view.render_icon(gtk.STOCK_SORT_ASCENDING, gtk.ICON_SIZE_BUTTON),
            self.APPLET_PANEL
        ])

        store.append([
            'Launchers', 
            self.main_menu_icon_view.render_icon(gtk.STOCK_FULLSCREEN, gtk.ICON_SIZE_BUTTON),
            self.LAUNCHER_PANEL
        ])

        store.append([
            'Themes', 
            self.main_menu_icon_view.render_icon(gtk.STOCK_SELECT_COLOR, gtk.ICON_SIZE_BUTTON),
            self.THEME_PANEL
        ])

        store.append([
            'Advanced', 
            self.main_menu_icon_view.render_icon(gtk.STOCK_EXECUTE, gtk.ICON_SIZE_BUTTON),
	        self.ADVANCED_PANEL
        ])					

        self.main_menu_icon_view.set_model(store)
        self.main_menu_icon_view.set_text_column(0)
        self.main_menu_icon_view.set_pixbuf_column(1)		
        self.main_menu_icon_view.select_path(self.PREFERENCE_PANEL)

    def showPanel(self, widget):
        store = widget.get_model()
        selected = widget.get_selected_items()
        panel = self.PREFERENCE_PANEL

        if len(selected) > 0:
            path = widget.get_selected_items()[0]
            iter = store.get_iter(path)
            panel = int(store.get_value(iter, 2))

        if self.current_panel is not None:
            self.panel_container.remove(self.current_panel)
            self.current_panel = None

        if panel == self.APPLET_PANEL:
            self.showAppletPanel()
        elif panel == self.LAUNCHER_PANEL:
            self.showLaunchPanel()
        elif panel == self.THEME_PANEL:
            self.showThemePanel()
        elif panel == self.ADVANCED_PANEL:
            self.showAdvPanel()
        else:
            self.showPrefPanel()

    def showPrefPanel(self):
        self.current_panel = self.wTree.get_object("prefPanel")
        self.panel_container.add(self.current_panel)
	
    def showAppletPanel(self):
        self.current_panel = self.wTree.get_object("appletPanel")
        self.panel_container.add(self.current_panel)

        appletTreeviewAvailable = self.wTree.get_object("appletTreeviewAvailable")
        appletCategoryList = self.wTree.get_object("appletCategoryList")

        cell = gtk.CellRendererText()

        col = gtk.TreeViewColumn("Categories", cell)
        appletCategoryList.append_column(col)
        col.set_attributes(cell, markup=0)
        #liststore = gtk.ListStore(str, str)
        #appletCategoryList.set_model(liststore)

        #col = gtk.TreeViewColumn("Description", cell)
        #appletTreeviewAvailable.append_column(col)
        #col.set_attributes(cell, markup=0)
        #liststore = gtk.ListStore(str, str, str)
        #appletTreeviewAvailable.set_model(liststore)

    def showLaunchPanel(self):
        self.current_panel = self.wTree.get_object("launchPanel")
        self.panel_container.add(self.current_panel)

    def showThemePanel(self):
        self.current_panel = self.wTree.get_object("themePanel")
        self.panel_container.add(self.current_panel)
	
    def showAdvPanel(self):
        self.current_panel = self.wTree.get_object("advPanel")
        self.panel_container.add(self.current_panel)
		
        
if __name__ == "__main__":
    vfs.init()
    try:
        awnmanager = awnManagerMini()
        awnmanager.main()
    finally:
        vfs.shutdown()
